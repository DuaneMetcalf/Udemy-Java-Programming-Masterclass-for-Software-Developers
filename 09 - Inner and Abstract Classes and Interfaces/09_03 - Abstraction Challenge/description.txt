For this challenge, create an abstract class to define items that can be stored in a list. 
The class should contain two references to items which will represent the next and previous items (in the case of a LinkedList).
i.e. if you call your abstract class ListItem, then it would have two member variables of type ListItem that will hold references to the next/right and previous/left ListItems.

The abstract class will also need to hold a value - try to be as flexible as possible when defining the type of this value.

The class will also need methods to move to the next item and back to a previous item, and methods to set the next and previous items.

You should also specify a compareTo() mothod that takes a parameter of the same type as the class and returns 0 if the values are equla, greater than zero if the value sorts greater than the parameter and less than zero if it sorts less than the parameter.

Create a concrete class from your abstract list item class and use this in a LinkedList class to omplement a linked list that will add items in order (so they are sorted alphabetically). Duplicate values are not added.

The rules for adding an items to the linked list are:
If the head of the list is null, make the head refer to the item added.
If the item to be added is less than the current item in the list, add the new item before the current item.
If the item to be added is greater than the current item, move onto the next items and compare again.

You will also need a method to remove an item from the list.

Hint/ If you are creating classes with names such as List, LinkedList, Node etc, make sure that you create your classes before referring to them. 

Optional. Create a class to use your concrete class to implement a Binary Search Tree.
When adding items to a binary search tree, if the item to be added is less than the current items, then move to the left, if it is greater, then move to the right.

The new item is added when an attempt to move in the required direction would involve following a null reference. Duplicate items are not allowed. 